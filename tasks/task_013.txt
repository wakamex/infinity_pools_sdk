# Task ID: 13
# Title: Implement Tenderly Impersonation Functional Test Framework
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create a comprehensive functional testing framework that leverages Tenderly impersonation to test SDK functions with real accounts and state on mainnet forks.
# Details:
The framework should support testing all core SDK functions including add_liquidity, remove_liquidity, collect_fees, swap_exact_input, swap_exact_output, get_position_details, and get_pool_info. Tests should be able to impersonate specific accounts to interact with real positions and pools without requiring private keys.

# Test Strategy:


# Subtasks:
## 1. Create Simple Impersonation Test Script [done]
### Dependencies: None
### Description: Develop a simple script to manually test the impersonation functionality with a specific SDK function
### Details:
Create a standalone script that uses the Tenderly impersonation feature to execute a simple SDK function call (e.g., getting account balances or position details). This will verify that the core impersonation functionality works correctly before building more complex tests. The script should be well-documented to serve as a reference for future test development.

## 2. Update Base Functional Test Class [done]
### Dependencies: None
### Description: Refine the base functional test class to properly initialize the SDK and provide common utilities
### Details:
Modify the BaseTenderlyFunctionalTest class to correctly initialize the SDK with the necessary parameters (connector and periphery address). Add helper methods for common operations like getting contract instances, checking balances, and handling transactions. Ensure the impersonated_connector fixture properly sets up the connector with the correct headers and configuration.

## 3. Implement Add Liquidity Functional Test [done]
### Dependencies: 13.2
### Description: Create a functional test for the add_liquidity SDK function using Tenderly impersonation
### Details:
Update the add_liquidity functional test to match the actual SDK implementation. Ensure it correctly handles token approvals, parameter formatting, and result verification. The test should use real token addresses and pools from mainnet, with appropriate safety measures to use small amounts. Include proper error handling and detailed logging to aid in debugging.

## 4. Implement Remove Liquidity Functional Test [in-progress]
### Dependencies: 13.2
### Description: Create a functional test for the remove_liquidity SDK function using Tenderly impersonation
### Details:
Update the remove_liquidity functional test to match the actual SDK implementation. The test should identify existing positions owned by the impersonated account, verify their details, and attempt to remove liquidity. Include proper validation of transaction results and position state changes. Handle edge cases like positions with zero liquidity or fully drained positions.

## 5. Implement Swap Functions Functional Tests [pending]
### Dependencies: 13.2
### Description: Create functional tests for swap_exact_input and swap_exact_output SDK functions
### Details:
Develop functional tests for the swap functions using Tenderly impersonation. Tests should verify that swaps execute correctly with the impersonated account, including token approvals, parameter formatting, and result verification. Use real token pairs from mainnet with appropriate safety measures to use small amounts. Include proper error handling and detailed logging to aid in debugging.

## 6. Implement Multicall/Batch Actions Test [pending]
### Dependencies: 13.2
### Description: Create a functional test for the multicall/batch_actions pattern using Tenderly impersonation
### Details:
Develop a functional test that demonstrates the multicall/batch_actions pattern identified by function selector `0xac9650d8` on the InfinityPoolsProxy. The test should batch multiple operations (e.g., approve and open position) into a single transaction using the impersonated account. Include proper validation of transaction results and state changes. This test is particularly important as it validates a core protocol pattern mentioned in the project memories.

## 7. Create Documentation for Tenderly Impersonation Testing [pending]
### Dependencies: None
### Description: Document the Tenderly impersonation testing framework and best practices
### Details:
Create comprehensive documentation for the Tenderly impersonation testing framework, including setup instructions, usage examples, and best practices. The documentation should cover how to configure environment variables, how to select accounts for impersonation, how to handle gas estimation issues, and how to troubleshoot common problems. Include examples of how to use the framework for testing different SDK functions and how to extend it for new functions.

## 8. Create Constants File for Token and Contract Addresses [done]
### Dependencies: None
### Description: Create a centralized constants file to store token addresses, contract addresses, and fee tiers for easier maintenance and reference across the codebase.
### Details:
Implement a constants.py file with:
- Base network token addresses (WETH, USDbC, sUSDe, wstETH)
- Contract addresses for different networks (proxy and implementation)
- Fee tier constants (0.01%, 0.05%, 0.3%, 1%)
This will improve code maintainability and reduce duplication.

## 9. Fix Token and Contract Addresses in Tests [done]
### Dependencies: None
### Description: Update the functional tests to use the correct token and contract addresses from the constants file.
### Details:
- Update test_add_liquidity_tenderly_functional.py to use the correct proxy address and token addresses from constants
- Update test_remove_liquidity_tenderly_functional.py to use the correct proxy address
- Fix imports in both test files to ensure they're using the correct ABIs and data models
- Ensure consistent use of Web3.to_checksum_address() for all addresses

## 10. Debug Token Approval Issues in Tenderly Tests [pending]
### Dependencies: None
### Description: Investigate and fix the token approval issues in the add_liquidity functional test with Tenderly impersonation.
### Details:
- Debug the "Failed to approve token0: Value must be an instance of str" error
- Ensure the impersonated address has sufficient token balances on the Tenderly fork
- Verify the transaction_overrides parameter is correctly handling gas limit settings
- Test with different token pairs if needed to validate the functionality

