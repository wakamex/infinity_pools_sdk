# Task ID: 7
# Title: Implement High-Level SDK for User Interactions
# Status: pending
# Dependencies: 4, 5, 6
# Priority: high
# Description: Create a user-friendly SDK class (`InfinityPoolsSDK` in `infinity_pools_sdk/sdk.py`) that provides high-level methods for common Infinity Pools protocol operations. This class will abstract away direct contract calls and data complexities, simplifying integration for developers.
# Details:
Create `infinity_pools_sdk/sdk.py` with the following implementation:

```python
from typing import Dict, Any, List, Optional, Union, Tuple
from decimal import Decimal
from web3.contract import Contract
from .core.connector import ContractConnector
from .models.data_models import AddLiquidityParams, SwapInfo, BatchActionsParams
from .erc.erc20 import ERC20Helper
from .core.periphery import InfinityPoolsPeriphery

class InfinityPoolsSDK:
    def __init__(self, connector: ContractConnector):
        self.connector = connector
        self.w3 = connector.w3
        self.periphery = InfinityPoolsPeriphery(connector)
        self.erc20 = ERC20Helper(connector)
    
    def get_pool_address(self, token0: str, token1: str, fee: int) -> str:
        """Get the address of a pool for the given tokens and fee tier"""
        return self.periphery.get_pool_address(token0, token1, fee)
    
    def get_pool_details(self, token0: str, token1: str, fee: int) -> Dict[str, Any]:
        """Get detailed information about a specific pool"""
        pool_address = self.get_pool_address(token0, token1, fee)
        # Fetch pool details like liquidity, current price, etc.
        # This would involve calling various view functions on the pool contract
        return {
            'address': pool_address,
            # Additional pool details would be added here
        }
    
    def get_user_positions(self, user_address: Optional[str] = None) -> List[Dict[str, Any]]:
        """Get all liquidity positions owned by the user"""
        if not user_address and not self.connector.account:
            raise ValueError("No user address provided and no account loaded")
        
        address = user_address or self.connector.account.address
        # Fetch positions from the contract
        # This would involve querying the NFT contract for tokens owned by the user
        # and then getting details for each position
        
        return []
    
    def add_liquidity(self, 
                      token0: str, 
                      token1: str, 
                      fee: int,
                      amount0: Decimal,
                      amount1: Decimal,
                      slippage_tolerance: Decimal = Decimal('0.01'),
                      recipient: Optional[str] = None,
                      deadline: Optional[int] = None) -> Dict[str, Any]:
        """Add liquidity to a pool and receive an LP NFT"""
        if not self.connector.account:
            raise ValueError("No account loaded for transaction")
        
        # Ensure token0 < token1 by address value
        if int(token0, 16) > int(token1, 16):
            token0, token1 = token1, token0
            amount0, amount1 = amount1, amount0
        
        # Create AddLiquidityParams object
        params = AddLiquidityParams(
            token0=token0,
            token1=token1,
            fee=fee,
            amount0Desired=amount0,
            amount1Desired=amount1,
            amount0Min=amount0 * (1 - slippage_tolerance),
            amount1Min=amount1 * (1 - slippage_tolerance),
            recipient=recipient or self.connector.account.address,
            deadline=deadline or (self.w3.eth.get_block('latest').timestamp + 1200)  # 20 minutes from now
        )
        
        # Call periphery contract
        return self.periphery.add_liquidity(params)
    
    def remove_liquidity(self, 
                         token_id: int,
                         liquidity_percentage: Decimal = Decimal('1'),
                         recipient: Optional[str] = None,
                         deadline: Optional[int] = None) -> Dict[str, Any]:
        """Remove liquidity from a position"""
        if not self.connector.account:
            raise ValueError("No account loaded for transaction")
        
        # Implementation would call the appropriate periphery contract method
        # to remove liquidity from the position
        
        return {}
    
    def collect_fees(self, 
                    token_id: int,
                    recipient: Optional[str] = None) -> Dict[str, Any]:
        """Collect accumulated fees from a position"""
        if not self.connector.account:
            raise ValueError("No account loaded for transaction")
        
        # Implementation would call the appropriate periphery contract method
        # to collect fees from the position
        
        return {}
    
    def swap_exact_input(self,
                         token_in: str,
                         token_out: str,
                         amount_in: Decimal,
                         min_amount_out: Optional[Decimal] = None,
                         recipient: Optional[str] = None,
                         deadline: Optional[int] = None) -> Dict[str, Any]:
        """Swap an exact amount of input tokens for a minimum amount of output tokens"""
        if not self.connector.account:
            raise ValueError("No account loaded for transaction")
        
        # Create SwapInfo object
        swap_info = SwapInfo(
            tokenIn=token_in,
            tokenOut=token_out,
            amountIn=amount_in,
            amountOutMinimum=min_amount_out or Decimal('0'),  # Default to 0 if not specified
            recipient=recipient or self.connector.account.address,
            deadline=deadline or (self.w3.eth.get_block('latest').timestamp + 1200)  # 20 minutes from now
        )
        
        # Call periphery contract
        return self.periphery.swap_deposit(swap_info)
    
    # Additional methods for other protocol operations would be implemented here
    # - borrow
    # - repay
    # - reflow
    # - etc.
```

Also create `infinity_pools_sdk/core/periphery.py` with the following implementation:

```python
from typing import Dict, Any, List, Optional, Union, Tuple
from decimal import Decimal
from web3.contract import Contract
from .connector import ContractConnector
from ..models.data_models import AddLiquidityParams, SwapInfo, BatchActionsParams
from ..erc.erc20 import ERC20Helper

class InfinityPoolsPeriphery:
    def __init__(self, connector: ContractConnector):
        self.connector = connector
        self.w3 = connector.w3
        self.contract = self._get_periphery_contract()
        self.erc20 = ERC20Helper(connector)
    
    def _get_periphery_contract(self) -> Contract:
        """Get the InfinityPoolsPeriphery contract instance"""
        return self.connector.get_contract('InfinityPoolsPeriphery')
    
    def get_pool_address(self, token0: str, token1: str, fee: int) -> str:
        """Get the address of a pool for the given tokens and fee tier"""
        # Ensure token0 < token1 by address value
        if int(token0, 16) > int(token1, 16):
            token0, token1 = token1, token0
        
        return self.contract.functions.getPoolAddress(token0, token1, fee).call()
    
    def add_liquidity(self, params: AddLiquidityParams) -> Dict[str, Any]:
        """Add liquidity to a pool and receive an LP NFT"""
        if not self.connector.account:
            raise ValueError("No account loaded for transaction")
        
        # Get token decimals for amount conversion
        token0_decimals = self.erc20.get_contract(params.token0).functions.decimals().call()
        token1_decimals = self.erc20.get_contract(params.token1).functions.decimals().call()
        
        # Check and set approvals if needed
        periphery_address = self.contract.address
        
        token0_allowance = self.erc20.allowance(
            params.token0, 
            self.connector.account.address, 
            periphery_address
        )
        if token0_allowance < params.amount0Desired:
            self.erc20.approve(params.token0, periphery_address, params.amount0Desired * 2)
        
        token1_allowance = self.erc20.allowance(
            params.token1, 
            self.connector.account.address, 
            periphery_address
        )
        if token1_allowance < params.amount1Desired:
            self.erc20.approve(params.token1, periphery_address, params.amount1Desired * 2)
        
        # Build and send transaction
        tx_params = {
            'from': self.connector.account.address,
        }
        
        contract_params = params.to_contract_tuple(token0_decimals, token1_decimals)
        tx = self.contract.functions.addLiquidity(contract_params).build_transaction(tx_params)
        tx_hash = self.connector.send_transaction(tx)
        
        # Wait for transaction and parse result
        receipt = self.connector.wait_for_transaction(tx_hash)
        
        # Parse events to get the tokenId of the minted position
        # This is a simplified version - actual implementation would need to parse the events
        # to extract the tokenId and other details
        
        return {
            'tx_hash': tx_hash,
            'receipt': receipt,
            # 'token_id': token_id,  # Would be extracted from events
            # Additional details from the transaction
        }
    
    def swap_deposit(self, swap_info: SwapInfo) -> Dict[str, Any]:
        """Perform a swap and deposit operation"""
        if not self.connector.account:
            raise ValueError("No account loaded for transaction")
        
        # Get token decimals for amount conversion
        token_in_decimals = self.erc20.get_contract(swap_info.tokenIn).functions.decimals().call()
        
        # Check and set approvals if needed
        periphery_address = self.contract.address
        
        token_in_allowance = self.erc20.allowance(
            swap_info.tokenIn, 
            self.connector.account.address, 
            periphery_address
        )
        if token_in_allowance < swap_info.amountIn:
            self.erc20.approve(swap_info.tokenIn, periphery_address, swap_info.amountIn * 2)
        
        # Build and send transaction
        tx_params = {
            'from': self.connector.account.address,
        }
        
        contract_params = swap_info.to_contract_tuple(token_in_decimals)
        tx = self.contract.functions.swapDeposit(contract_params).build_transaction(tx_params)
        tx_hash = self.connector.send_transaction(tx)
        
        # Wait for transaction and parse result
        receipt = self.connector.wait_for_transaction(tx_hash)
        
        # Parse events to get details about the swap
        # This is a simplified version - actual implementation would need to parse the events
        
        return {
            'tx_hash': tx_hash,
            'receipt': receipt,
            # Additional details from the transaction and events
        }
    
    # Implement other periphery contract methods following the same pattern
    # - newLoanWithSwap
    # - batchActionsOnSwappers
    # - reflow
    # - collect
    # - drain
    # - tap
    # etc.
```

# Test Strategy:
1. Write unit tests in `tests/test_sdk.py` that verify:
   - SDK initialization and configuration
   - Parameter preparation for contract calls
   - Interaction with mocked `ContractConnector`
   - Return value handling
   - ERC20 approval management
   - Error handling and validation
2. Test each high-level method:
   - `add_liquidity`
   - `remove_liquidity`
   - `collect_fees`
   - `swap_exact_input`
   - `get_pool_details`
   - `get_user_positions`
3. Use mock objects for the `ContractConnector` and contract instances
4. Test parameter validation and error cases
5. Integration tests on a testnet can be a secondary step
